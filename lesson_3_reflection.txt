When would you want to use a remote repository rather than keeping all your work
local?

 iN few cases
 a) when more than one person is working on project . everyone can easily commi their changes as well as get build which are modified by others
 b) when we need backup and more saftey for our code

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

  We want to pull changes manually because
  If its done automatically we wil get the changes from other people in our repsoitory and may we dont want that.
b) there is a reisk of conflict in files
c) our changes will be revert back


Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

Fork is generally used when we want to replicate exisiting repoistory on gitHub.For example say alice has is working on receipe and has her own repo for it. I can forked that receipe on my id and can make changes  on it directly without affecting her origin.
We just cant push changes into her original repo. we need permission from her.

Clone is used to clone repo from github to git or from git to git. 
change smade on locla workstation can be pushed to github easily.

Branches are used for making logical changes and commit it to local repos.
What is the benefit of having a copy of the last known state of the remote
stored locally?

 Benfit is that we can solve merging issues. if we use pull then it will fetch copies from and merge it into our repo and we will not able to find out what changes it has brought. if we use git fetch then it will first fetch copies into our local system and will not merge. so we can use git log and git diff to view changes. This helps lot in savoiding merging conflicts.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

   without version control , solving merging conflicts will be difficult.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Seprate branch help other team member to review our code with pull request and recomend some changes if needed. once we are happy with changes we can merge it into master and hence keep master branch always update and make sure that it meets coding stnadard and doesnt accidently break.
